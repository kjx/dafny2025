@inproceedings{vergu2017semantics,
  title={The semantics of name resolution in {G}race},
  author={Vergu, Vlad and Haisma, Michiel and Visser, Eelco},
  booktitle={{DLS}},
  longbooktitle={Proceedings of the 13th ACM SIGPLAN International Symposium on on Dynamic Languages},
  pages={63--74},
  year={2017}
}


@MastersThesis{graceInSpoofax,
  author = 	 {Haisma, Michiel},
  title = 	 {{G}race in {S}poofax},
  school = 	 {{TUDelft}},
  year = 	 2017,
  month = 	 may}






@Misc{metaborgGrace,
  author = 	 {Michiel Haisma and Vlad Vergu and Eelco Visser},
  title = 	 {Spoofax-based implementation of the {G}race Language},
  month = 	 feb,
  year = 	 2017,
  note = 	 {\url{github.com/MetaBorgCube/metaborg-grace}}}

@InProceedings{spoofaxGraceECOOP2016,
  author = 	 {Michiel Haisma and Vlad Vergu and Eelco Visser},
  title = 	 {Grace in Spoofax: Readable Specification and Implementation in One},
  booktitle = {{GRACE} workshop at {ECOOP}},
  year = 	 2016,
  month = 	 jul,
  note = 	 {\url{2016.ecoop.org/details/GRACE-2016/2/Grace-in-Spoofax-Readable-Specification-and-Implementation-in-One}}}


@Misc{backusVsDijkstra,
  author = 	 {Jiahao Chen},
  title = 	 {``This guy’s arrogance takes your breath away''},
  month = 	 may,
  year = 	 2016,
  note = 	 {https://medium.com/@acidflask/this-guys-arrogance-takes-your-breath-away-5b903624ca5f}}


@Misc{Tiobe,
  key =       {Tiobe},
  title =     {TIOBE Index for June 2022},
  howpublished = {\url{https://www.tiobe.com/tiobe-index/}},
  year =      {2022},
}

@Misc{racketIsRacket,
  author = 	 {Eli Barzilay},
  title = 	 {Racket},
  month = 	 jun,
  year = 	 2010,
  note = 	 {\url{https://blog.racket-lang.org/2010/06/racket.html}}}


@Misc{JavaVersionHistory,
  author = 	 {{Wikipedia}},
  title = 	 {Java version history},
  month = 	 nov,
  year = 	 2022,
  note = 	 {\url{en.wikipedia.org/wiki/Java_version_history}}}


@InProceedings{sdf3,
author="de Souza Amorilm, Lu{\'i}s Eduardo
and Visser, Eelco",
Xeditor="de Boer, Frank and Cerone, Antonio",
title="Multi-purpose Syntax Definition with SDF3",
booktitle="Software Engineering and Formal Methods",
year="2020",
Xpublisher="Springer International Publishing",
Xaddress="Cham",
Xpages="1--23",
Xabstract="SDF3 is a syntax definition formalism that extends plain context-free grammars with features such as constructor declarations, declarative disambiguation rules, character-level grammars, permissive syntax, layout constraints, formatting templates, placeholder syntax, and modular composition. These features support the multi-purpose interpretation of syntax definitions, including derivation of type schemas for abstract syntax tree representations, scannerless generalized parsing of the full class of context-free grammars, error recovery, layout-sensitive parsing, parenthesization and formatting, and syntactic completion. This paper gives a high level overview of SDF3 by means of examples and provides a guide to the literature for further details.",
Xisbn="978-3-030-58768-0"
}



@inproceedings{layout2018,
  author    = {Lu{\'{\i}}s Eduardo de Souza Amorim and
               Michael J. Steindorfer and
               Sebastian Erdweg and
               Eelco Visser},
  Xeditor    = {David J. Pearce and
               Tanja Mayerhofer and
               Friedrich Steimann},
  title     = {Declarative specification of indentation rules: a tooling perspective
               on parsing and pretty-printing layout-sensitive languages},
  Xbooktitle = {Proceedings of the 11th {ACM} {SIGPLAN} International Conference on
               Software Language Engineering, {SLE} 2018, Boston, MA, USA, November
               05-06, 2018},
  booktitle = {{SLE}},	       
  Xpages     = {3--15},
  Xpublisher = {{ACM}},
  year      = {2018},
  Xurl       = {https://doi.org/10.1145/3276604.3276607},
  Xdoi       = {10.1145/3276604.3276607},
  Xtimestamp = {Wed, 26 May 2021 08:40:05 +0200},
  Xbiburl    = {https://dblp.org/rec/conf/sle/AmorimSEV18.bib},
  Xbibsource = {dblp computer science bibliography, https://dblp.org}
}

@Misc{vw-video,
  author = 	 {{Centrum Wiskunde \& Informatica}},
  title = 	 {Memories of {A}ad van {W}ijngaarden (1916-1987)},
  month = 	 nov,
  year = 	 2016,
  note = 	 {\url{https://www.youtube.com/watch?v=okLiv1QA4Dg}}}


@article{hoare-emperor-1981,
author = {Hoare, Charles Antony Richard},
title = {The Emperor's Old Clothes},
year = {1981},
Xissue_date = {Feb. 1981},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
volume = {24},
number = {2},
Xissn = {0001-0782},
Xurl = {https://doi.org/10.1145/358549.358561},
Xdoi = {10.1145/358549.358561},
Xjournal = {Commun. ACM},
journal = {{CACM}},
month = {feb},
pages = {75–83},
Xnumpages = {9},
Xkeywords = {programming languages, history of programming languages, lessons for the future}
}


@article{wright-felleisen-1994,
author = {Wright, A.K. and Felleisen, M.},
title = {A Syntactic Approach to Type Soundness},
year = 1994,
Xissue_date = {Nov. 15, 1994},
Xpublisher = {Academic Press, Inc.},
Xaddress = {USA},
volume = 115,
number = 1,
Xissn = {0890-5401},
Xurl = {https://doi.org/10.1006/inco.1994.1093},
Xdoi = {10.1006/inco.1994.1093},
Xabstract = {We present a new approach to proving type soundness for Hindley/Milner-style polymorphic type systems. The keys to our approach are (1) an adaptation of subject reduction theorems from combinatory logic to programming languages, and (2) the use of rewriting techniques for the specification of the language semantics. The approach easily extends from polymorphic functional languages to imperative languages that provide references, exceptions, continuations, and similar features. We illustrate the technique with a type soundness theorem for the core of Standard ML, which includes the first type soundness proof for polymorphic exceptions and continuations.},
journal = {{Information and Computation}},
month = {nov},
pages = {38–94},
Xnumpages = 57
}


@Book{stroustrup-de,
  author = 	 {Bjarne Stroustrup},
  title = 	 {The Design and Evolution of C$++$},
  publisher = 	 {Addison-Wesley Professional},
  year = 	 1994
}


@TechReport{kernighan-on-pascal,
  author = 	 {Brian Kernighan},
  title = 	 {Why Pascal is not my Favourite Programming Language},
  institution =  {Bell Labs},
  year = 	 1903,
  number =	 100
}

@Misc{go-vs-brandX,
  author = 	 {David Given},
  title = 	 {On {Go}},
  month = 	 nov,
  year = 	 2009,
  annote = 	 {\url{http://cowlark.com/2009-11-15-go/}}
}


@Misc{algol-2068,
  author = 	 {Chris Hermansen},
  title = 	 {Exploring {Algol 68} in the 21st century},
  month = 	 jun,
  year = 	 2020,
  note = 	 {\url{https://opensource.com/article/20/6/algol68}}}


@Article{algol-68-retro,
  author = 	 {Daniel James},
  title = 	 {Algol 68\,---\,A Retrospective},
  journal = 	 {Overload},
  year = 	 2018,
  volume = 	 26,
  number = 	 148,
  pages = 	 {20--26},
  month = 	 dec,
  note = 	 {\url{https://accu.org/journals/overload/26/148/james_2586/}}}


@article{graceInheritanceJOT,
  author = {James Noble and Andrew P. Black and Kim B. Bruce and Michael Homer and Timothy Jones},
  title = {Grace's Inheritance},
  journal = {Journal of Object Technology},
  volume = {16},
  number = {2},
  xissn = {1660-1769},
  year = {2017},
  month = apr,
  pages = {2:1-35},
  xdoi = {10.5381/jot.2017.16.2.a2},
  xurl = {http://www.jot.fm/contents/issue_2017_02/article2.html}
}

@Misc{firstwarp,
  author = 	 {{Laserfiche contributor}},
  title = 	 {How Your First Programming Language Warps Your Brain},
  year = 	 {{n.d.}},
  note = 	 {\url{www.laserfiche.com/ecmblog/programming-languages-change-brain/}, accessed 17 Nov 2022}}

@article{goodFirstPL,
author = {Gupta, Diwaker},
title = {What is a Good First Programming Language?},
year = {2004},
Xissue_date = {August 2004},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
volume = {10},
number = {4},
Xissn = {1528-4972},
Xurl = {https://doi.org/10.1145/1027313.1027320},
Xdoi = {10.1145/1027313.1027320},
journal = {{ACM} Crossroads},
month = {aug},
pages = {7},
Xnumpages = {1}
}

@inproceedings{PLchoice,
author = {Simon and Mason, Raina and Crick, Tom and Davenport, James H. and Murphy, Ellen},
title = {Language Choice in Introductory Programming Courses at {A}ustralasian and {UK} Universities},
year = {2018},
Xisbn = {9781450351034},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
Xurl = {https://doi.org/10.1145/3159450.3159547},
Xdoi = {10.1145/3159450.3159547},
Xabstract = {Parallel surveys of introductory programming courses were conducted in Australasia and the UK, with a view to examining the programming languages being used, the preferred integrated development environments (if any), and the reasons for these choices, alongside a number of other key aspects of these courses. This paper summarises some of the similarities and differences between the findings of the two surveys. In the UK, Java is clearly the dominant programming language in introductory programming courses, with Eclipse as the dominant environment. Java was also the dominant language in Australasia six years ago, but now shares the lead with Python; we speculate on the reasons for this. Other differences between the two surveys are equally interesting. Overall, however, there appears to be a reasonable similarity in the way these undergraduate courses are conducted in the UK and in Australasia. While the degree structures differ markedly between and within these regions -- a possible explanation for some of the differences -- some of the similarities are noteworthy and have the potential to provide insight into approaches in other regions and countries.},
longbooktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
booktitle = {{SIGCSE}},
pages = {852–857},
Xnumpages = {6},
Xkeywords = {programming pedagogy, CS1, computing curricula, computing education, introductory programming, programming environments},
Xlocation = {Baltimore, Maryland, USA},
Xseries = {SIGCSE '18}
}


@inproceedings{WexelblatFirst,
author = {Wexelblat, Richard L.},
title = {The Consequences of One's First Programming Language},
year = {1980},
Xisbn = {0897910249},
Xpublisher = {Association for Computing Machinery},
Zaddress = {New York, NY, USA},
Xurl = {https://doi.org/10.1145/800088.802823},
Xdoi = {10.1145/800088.802823},
Xabstract = {Who has not seen programs written in one programming language that have the style of another language? Having experienced “Fortran with semicolons” and “C with a BASIC flavor” over the years, it occurred to me to wonder whether the programmer's first programming language had an effect on programming ability as profound as the effect of one's native language on one's thought patterns. Over many years of programming, teaching programming, and debugging other people's programs, it seemed to me that something akin to the Sapir-Whorf Hypothesis applied to programmers—especially those who have never been taught to abstract the development of algorithms from the development of programs. Indeed, I began to worry about the consequences of loosing on the computer centers (and computer science departments) of a horde of programmers whose total background is a rudimentary BASIC learned in elementary or high school from a teacher who has virtually no actual programming experience.},
Xbooktitle = {Proceedings of the 3rd ACM SIGSMALL Symposium and the First SIGPC Symposium on Small Systems},
pages = {52–55},
Xnumpages = {4},
Xlocation = {Palo Alto, California, USA},
Xseries = {SIGSMALL '80},
booktitle = {{SIGSMALL}}
}


@article{pythonFirst,
author = {Dierbach, Charles},
title = {Python as a First Programming Language},
year = {2014},
Xissue_date = {June 2014},
Zpublisher = {Consortium for Computing Sciences in Colleges},
Zaddress = {Evansville, IN, USA},
volume = {29},
number = {6},
Zissn = {1937-4771},
Xabstract = {The Python programming language has been quickly gaining popularity over the past few years as a language of choice for CS1 courses. Some estimates put the rise in use at forty-percent a year. As far back as 2006 there have been reports of significant improvement in both student and instructor satisfaction by redesigning introductory courses to use the simplicity of Python rather than the complexity of a language like Java.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {153–154},
Xnumpages = {2}
}

@inproceedings{donaldson2003python,
  title={Python as a first programming language for everyone},
  author={Donaldson, Toby},
  booktitle={Western Canadian Conference on Computing Education},
  Xvolume={232},
  year={2003}
}

@Misc{PLasL,
  author = 	 {James Noble and Robert Biddle},
  title = 	 {{programmingLanguage as Language;}},
  month = 	 jun,
  year = 	 2021,
  note = 	 {\url{https://hopl4.sigplan.org/details/hopl-4-papers/21/programmingLanguage-as-Language-}}}


@inproceedings{NeronTVW15,
  title = {A Theory of Name Resolution},
  author = {Pierre Néron and Andrew P. Tolmach and Eelco Visser and Guido Wachsmuth},
  year = {2015},
  xdoi = {10.1007/978-3-662-46669-8_9},
  xurl = {http://dx.doi.org/10.1007/978-3-662-46669-8_9},
  xresearchr = {https://researchr.org/publication/NeronTVW15},
  xcites = {0},
  citedby = {0},
  pages = {205-231},
  longbooktitle = {Programming Languages and Systems - 24th European Symposium on Programming, ESOP 2015, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015, London, UK, April 11-18, 2015. Proceedings},
  booktitle = {{ESOP}},
  Xeditor = {Jan Vitek},
  Xvolume = {9032},
  Xseries = {Lecture Notes in Computer Science},
  Xpublisher = {Springer},
  Xisbn = {978-3-662-46668-1},
}

@inproceedings{AntwerpenNTVW16,
  title = {A constraint language for static semantic analysis based on scope graphs},
  author = {Hendrik van Antwerpen and Pierre Néron and Andrew P. Tolmach and Eelco Visser and Guido Wachsmuth},
  year = {2016},
  Xdoi = {10.1145/2847538.2847543},
  Xurl = {http://doi.acm.org/10.1145/2847538.2847543},
  Xresearchr = {https://researchr.org/publication/AntwerpenNTVW16},
  Xcites = {0},
  Xcitedby = {0},
  pages = {49-60},
  longbooktitle = {Proceedings of the 2016 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, PEPM 2016, St. Petersburg, FL, USA, January 20 - 22, 2016},
   booktitle = {{PEPM}},
  xeditor = {Martin Erwig and Tiark Rompf},
  xpublisher = {ACM},
  xisbn = {978-1-4503-4097-7},
}

@inproceedings{VerguNV15,
  title = {DynSem: A {DSL} for Dynamic Semantics Specification},
  author = {Vlad A. Vergu and Pierre Néron and Eelco Visser},
  year = {2015},
  Xdoi = {10.4230/LIPIcs.RTA.2015.365},
  Xurl = {http://dx.doi.org/10.4230/LIPIcs.RTA.2015.365},
  Xresearchr = {https://researchr.org/publication/VerguNV15},
  cites = {0},
  citedby = {0},
  pages = {365--378},
  longbooktitle = {26th International Conference on Rewriting Techniques and Applications, RTA 2015, June 29 to July 1, 2015, Warsaw, Poland},
  booktitle = {26th Int. Conf. Rewriting Techniques and Applications (RTA '15},
  xeditor = {Maribel Fernández},
  xvolume = {36},
  xseries = {LIPIcs},
  xpublisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"}ur Informatik},
  xisbn = {978-3-939897-85-9},
}


@article{BravenboerKVV08,
  title = {{Stratego/XT 0.17}. {A} language and toolset for program transformation},
  author = {Martin  Bravenboer and Karl Trygve Kalleberg and Rob Vermaas and Eelco Visser},
  year = {2008},
  Xdoi = {10.1016/j.scico.2007.11.003},
  Xurl = {http://dx.doi.org/10.1016/j.scico.2007.11.003},
  Xtags = {control systems, programming languages, object-oriented programming, concrete object syntax, reusable components, rule-based, completeness, meta programming, pattern language, graph transformation, Stratego/XT, transformation language, reuse, graph-rewriting, rules, transformation system, DSL, programming, subject-oriented programming, context-aware, abstraction, Meta-Environment, rewriting, rewriting strategies, feature-oriented programming, concrete syntax, meta-objects, transformation, Stratego, program transformation},
  Xresearchr = {https://researchr.org/publication/BravenboerKVV08},
  cites = {0},
  citedby = {7},
  journal = {Science of Computer Programming},
  volume = {72},
  number = {1-2},
  pages = {52-70},
}

@inproceedings{Wijngaarden1974TheGP,
  title={The Generative Power of Two-Level Grammars},
  author={Adriaan van Wijngaarden},
  booktitle={ICALP},
  year={1974}
}