@Book{dafny2020,
  author = 	 {Leino, K. Rustan M.},
  title = 	 {Program Proofs},
  publisher = 	 {Available from Lulu.com},
  year = 	 {2020}
}

@Book{dafny2023,
  author = 	 {Leino, K. Rustan M.},
  title = 	 {Program Proofs},
  publisher = 	 {{MIT} Press},
  year = 	 {2023}
}



@inproceedings{Abtahi2020,
  title={Learning Rust: How Experienced Programmers Leverage Resources to Learn a New Programming Language},
  author={Abtahi, Parastoo and Dietz, Griffin},
  booktitle={Extended Abstracts of the 2020 CHI Conference on Human Factors in Computing Systems},
  pages={1--8},
  year={2020}
}


@article{Markstrum2010,
  title={JavaCOP: Declarative pluggable types for Java},
  author={Markstrum, Shane and Marino, Daniel and Esquivel, Matthew and Millstein, Todd and Andreae, Chris and Noble, James},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={32},
  number={2},
  pages={1--37},
  year={2010},
  publisher={ACM New York, NY, USA}
}

@inproceedings{Arlt2014,
  title={The gradual verifier},
  author={Arlt, Stephan and Rubio-Gonz{\'a}lez, Cindy and R{\"u}mmer, Philipp and Sch{\"a}f, Martin and Shankar, Natarajan},
  booktitle={NASA Formal Methods Symposium},
  pages={313--327},
  year={2014},
  organization={Springer}
}

@article{Astrauskas2019,
  title={Leveraging Rust types for modular specification and verification},
  author={Astrauskas, Vytautas and M{\"u}ller, Peter and Poli, Federico and Summers, Alexander J},
  journal={Proceedings of the ACM on Programming Languages},
  volume={3},
  number={OOPSLA},
  pages={1--30},
  year={2019},
  publisher={ACM New York, NY, USA}
}

@inproceedings{Bader2018,
  title={Gradual Program Verification.},
  author={Bader, Johannes and Aldrich, Jonathan and Tanter, {\'E}ric},
  booktitle={VMCAI},
  pages={25--46},
  year={2018}
}


@inproceedings{Beckert2012,
  title={Evaluating the Usability of Interactive Verification Systems.},
  author={Beckert, Bernhard and Grebing, Sarah},
  booktitle={COMPARE},
  pages={3--17},
  year={2012},
  organization={Citeseer}
}

@article{Pennekamp2021,
  title={Collaboration is not Evil: A Systematic Look at Security Research for Industrial Use},
  author={Pennekamp, Jan and Buchholz, Erik and Dahlmanns, Markus and Kunze, Ike and Braun, Stefan and Wagner, Eric and Brockmann, Matthias and Wehrle, Klaus and Henze, Martin},
  journal={arXiv preprint arXiv:2112.11417},
  year={2021}
}

@misc{Blaser2019,
  title={Simple Explanation of Complex Lifetime Errors in Rust},
  author={Blaser, David},
  year={2019}
}

@inproceedings{Christakis2016,
  title={Integrated environment for diagnosing verification errors},
  author={Christakis, Maria and Leino, K Rustan M and M{\"u}ller, Peter and W{\"u}stholz, Valentin},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  pages={424--441},
  year={2016},
  organization={Springer}
}

@book{Brooks1987,
  title={No silver bullet},
  author={Brooks, F and Kugler, H},
  year={1987},
  publisher={April}
}

@article{Coblenz2019,
  title={PLIERS: A Process that Integrates User-Centered Methods into Programming Language Design},
  author={Coblenz, Michael and Kambhatla, Gauri and Koronkevich, Paulette and Wise, Jenna L and Barnaby, Celeste and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A},
  journal={arXiv preprint arXiv:1912.04719},
  year={2019}
}

@inproceedings{Cook2018,
  title={Formal reasoning about the security of {A}mazon {W}eb {S}ervices},
  author={Cook, Byron},
  booktitle={International Conference on Computer Aided Verification},
  pages={38--47},
  year={2018},
  organization={Springer}
}


@inproceedings{Dietl2011,
  title={Building and using pluggable type-checkers},
  author={Dietl, Werner and Dietzel, Stephanie and Ernst, Michael D and Mu{\c{s}}lu, Kivan{\c{c}} and Schiller, Todd W},
  booktitle={Proceedings of the 33rd International Conference on Software Engineering},
  pages={681--690},
  year={2011}
}


@Misc{bladeRunnerFilm,
  author = 	 {Ridley Scott},
  title = 	 {Blade Runner},
  howpublished = {Motion Picture},
  year = 	 1982}
  
  @Article{matrixOracle,
  author = 	 {Frances Flannery-Dailey and Rachel L. Wagner},
  title = 	 {Wake up! {G}nosticism and {B}uddhism in The {M}atrix},
  journal={Journal of Religion \& Film},
  volume = 5,
  number = 2,
  year = 	 2001}
  
  
  @book{Dongol2019,
  title={Formal Methods Teaching: Third International Workshop and Tutorial, FMTea 2019, Held as Part of the Third World Congress on Formal Methods, FM 2019, Porto, Portugal, October 7, 2019, Proceedings},
  author={Dongol, Brijesh and Petre, Luigia and Smith, Graeme},
  volume={11758},
  year={2019},
  publisher={Springer Nature}
}


@inproceedings{Figueroa2018,
  title={Towards progressive program verification in Dafny},
  author={Figueroa, Ismael and Garc{\'\i}a, Bruno and Leger, Paul},
  booktitle={Proceedings of the XXII Brazilian Symposium on Programming Languages},
  pages={90--97},
  year={2018}
}





@inproceedings{Garavel2020,
  title={The 2020 expert survey on formal methods},
  author={Garavel, Hubert and Ter Beek, Maurice H and Van De Pol, Jaco},
  booktitle={International Conference on Formal Methods for Industrial Critical Systems},
  pages={3--69},
  year={2020},
  organization={Springer}
}




@incollection{Grebing2020,
  title={Usability Recommendations for User Guidance in Deductive Program Verification},
  author={Grebing, Sarah and Ulbrich, Mattias},
  booktitle={Deductive Software Verification: Future Perspectives},
  pages={261--284},
  year={2020},
  publisher={Springer}
}

@article{Green1996,
  title={Usability analysis of visual programming environments: a ‘cognitive dimensions’ framework},
  author={Green, Thomas R. G. and Petre, Marian},
  journal={Journal of Visual Languages \& Computing},
  volume={7},
  number={2},
  pages={131--174},
  year={1996},
  publisher={Elsevier}
}

%%MIRU - whats' this???
@article{Grotto2021,
  title={Vulnerability Disclosure and Management for AI/ML Systems},
  author={Grotto, AJ},
  journal={ML Systems: A Working Paper with Policy Recommendations (November 15, 2021)},
  year={2021}
}



@inproceedings{Hoda2017,
  title={Becoming agile: a grounded theory of agile transitions in practice},
  author={Hoda, Rashina and Noble, James},
  booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)},
  pages={141--151},
  year={2017},
  organization={IEEE}
}


@book{Jones2021,
  title={Theories of Programming: The Life and Works of Tony Hoare},
  author={Jones, Cliff B and Misra, Jayadev},
  year={2021},
  publisher={Morgan \& Claypool}
}

@article{Jung2017,
  title={{RustBelt:} Securing the foundations of the Rust programming language},
  author={Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  journal={Proceedings of the ACM on Programming Languages},
  volume={2},
  number={{POPL}},
  pages={1--34},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@book{Klabnik2019,
  title={The {R}ust Programming Language (Covers {R}ust 2018)},
  author={Klabnik, Steve and Nichols, Carol},
  year={2019},
  publisher={No Starch Press}
}

@misc{steve2019rust,
  title={The Rust Programming Language (Covers Rust 2018)},
  author={Steve, Klabnik and Carol, Nichols},
  year={2019},
  publisher={No Starch Press}
}

@inproceedings{Flanagan2002,
  title={Extended static checking for {J}ava},
  author={Flanagan, Cormac and Leino, K Rustan M and Lillibridge, Mark and Nelson, Greg and Saxe, James B and Stata, Raymie},
  booktitle={Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation},
  pages={234--245},
  year={2002}
}

@inproceedings{Leino2013,
  title={Developing verified programs with {D}afny},
  author={Leino, K Rustan M},
  booktitle={2013 35th International Conference on Software Engineering (ICSE)},
  pages={1488--1490},
  year={2013},
  organization={IEEE}
}


@inproceedings{Muller2011,
  title={Using debuggers to understand failed verification attempts},
  author={M{\"u}ller, Peter and Ruskiewicz, Joseph N},
  booktitle={International Symposium on Formal Methods},
  pages={73--87},
  year={2011},
  organization={Springer}
}

@inproceedings{Pang2018,
  title={What programming languages do developers use? A theory of static vs dynamic language choice},
  author={Pang, Aaron and Anslow, Craig and Noble, James},
  booktitle={2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
  pages={239--247},
  year={2018},
  organization={IEEE}
}

@article{Pearce2015,
  title={Designing a verifying compiler: Lessons learned from developing {W}hiley},
  author={Pearce, David J and Groves, Lindsay},
  journal={Science of Computer Programming},
  volume={113},
  pages={191--220},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{Qin2020,
  title={Understanding memory and thread safety practices and issues in real-world Rust programs},
  author={Qin, Boqin and Chen, Yilun and Yu, Zeming and Song, Linhai and Zhang, Yiying},
  booktitle={Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={763--779},
  year={2020}
  }
  
  @article{Ringer2020,
  title={QED at large: A survey of engineering of formally verified software},
  author={Ringer, Talia and Palmskog, Karl and Sergey, Ilya and Gligoric, Milos and Tatlock, Zachary},
  journal={arXiv preprint arXiv:2003.06458},
  year={2020}
}

@inproceedings{Waterman2015,
  title={How much up-front? A grounded theory of agile architecture},
  author={Waterman, Michael and Noble, James and Allan, George},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={1},
  pages={347--357},
  year={2015},
  organization={IEEE}
}

@article{Wise2020,
  title={Gradual verification of recursive heap data structures},
  author={Wise, Jenna and Bader, Johannes and Wong, Cameron and Aldrich, Jonathan and Tanter, {\'E}ric and Sunshine, Joshua},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={OOPSLA},
  pages={1--28},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@inproceedings{Aceto2021,
  title={Introducing Formal Methods to First-Year Students in Three Intensive Weeks},
  author={Aceto, Luca and Ing{\'o}lfsd{\'o}ttir, Anna},
  booktitle={Formal Methods Teaching Workshop},
  pages={1--17},
  year={2021},
  organization={Springer}
}

@inproceedings{Yatapanage2021,
  title={Introducing Formal Methods to Students Who Hate Maths and Struggle with Programming},
  author={Yatapanage, Nisansala},
  booktitle={Formal Methods Teaching Workshop},
  pages={133--145},
  year={2021},
  organization={Springer}
}

@inproceedings{kamburjan2021increasing,
  title={Increasing Engagement with Interactive Visualization: Formal Methods as Serious Games},
  author={Kamburjan, Eduard and Gr{\"a}tz, Lukas},
  booktitle={Formal Methods Teaching Workshop},
  pages={43--59},
  year={2021},
  organization={Springer}
}

@article{TomAngeloWherever,
 title="A Teacher's Dozen—Fourteen General Research-Based Principles for Improving
Higher Learning",
 author={Tom Angelo},
 year={1993},
 journal={{AAHE} Bulletin}
 }
 
 @book{Greengard2021,
  title={The Internet of Things},
  author={Greengard, Samuel},
  year={2021},
  publisher={MIT press}
}

@inproceedings{formed08,
  title={Introducing {A}lloy in a Software Modelling Course},
  author={James Noble and David J. Pearce and Lindsay Groves},
  booktitle={1st Workshop on Formal Methods in Computer Science Education ({FORMED})},
  year = 2008}
  
 @article{irondafny,
  author    = {Chris Hawblitzel and
               Jon Howell and
               Manos Kapritsos and
               Jacob R. Lorch and
               Bryan Parno and
               Michael L. Roberts and
               Srinath T. V. Setty and
               Brian Zill},
  title     = {{IronFleet}: proving safety and liveness of practical distributed systems},
  journal   = {Commun. {ACM}},
  volume    = {60},
  number    = {7},
  pages     = {83--92},
  year      = {2017}
}

@inproceedings{bornholt2021using,
  title={Using lightweight formal methods to validate a key-value storage node in Amazon S3},
  author={Bornholt, James and Joshi, Rajeev and Astrauskas, Vytautas and Cully, Brendan and Kragl, Bernhard and Markle, Seth and Sauri, Kyle and Schleit, Drew and Slatton, Grant and Tasiran, Serdar and others},
  booktitle={Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
  pages={836--850},
  year={2021}
}

@inproceedings{rustan1998extended,
  title={An extended static checker for {M}odula-3},
  author={Leino, K. Rustan M. and Nelson, Greg},
  booktitle={International Conference on Compiler Construction},
  pages={302--305},
  year={1998},
  organization={Springer}
}

@incollection{wayne2018temporal,
  title={Temporal Logic},
  author={Wayne, Hillel},
  booktitle={Practical TLA+},
  pages={97--110},
  year={2018},
  publisher={Springer}
}

@book{dutle2021nasa,
  title={NASA Formal Methods: 13th International Symposium, NFM 2021, Virtual Event, May 24--28, 2021, Proceedings},
  author={Dutle, Aaron},
  year={2021},
  publisher={Springer Nature}
}

@book{ferreiraformal,
  title={Formal Methods Teaching {(FMTea)}},
  author={Ferreira, Jo{\~a}o F and Mendes, Alexandra and Menghi, Claudio},
  year = {2021},
   publisher={Springer Nature}
}

@book{FMFUN19,
 title={Formal Methods – Fun for Everybody {(FMFun)}},
 year = 2019,
 publisher = {Springer},
 editor = {Antonio Cerone and Markus Roggenbach}
 }
 
 @inproceedings{ZZZ,
  booktitle={Formal Methods – Fun for Everybody {(FMFun)}},
  title={Teaching Formal Methods in Academia: A Systematic Literature Review},
  author={Rustam Zhumagambetov},
  year=2019
 }
 
 @inproceedings{autoactive2010,
  title={Usable Auto-Active Verification},
  author={Leino, K. Rustan M. and Moskal, Michael},
  booktitle={Usable Verification Workshop {(UV10)}},
  year={2010}
  }

@inproceedings{why3teaching2019,
  title={Teaching Deductive Verification in {Why3} to Undergraduate Students},
  author={Sandrine Blazy},
  booktitle={Formal Methods Teaching (FMTea)},
  year=2019
}

@inproceedings{teachDafny2021,
  title={Lessons of Formal Program Design in {D}afny},
  author={Ran Ettinger},
  booktitle={Formal Methods Teaching (FMTea)},
  year=2021
}

@inproceedings{shriramformal2019,
 title={The Human in Formal Methods},
 author={Shriram Krishnamurthi and Tim Nelson},
 booktitle={Formal Methods (FM)},
 year=2019
 }
 
 @inproceedings{teachFRAMA2021,
  title={Online Teaching of Verification of {C} Programs in Applied Computer Science},
  author={Matthias G{\"u}demann},
  booktitle={Formal Methods Teaching (FMTea)},
  year=2021
}

  
 @inproceedings{reliance2021,
  title={Increasing Student Self-Reliance and Engagement in Model-Checking Courses},
  author={Philipp K{\"o}rner and Sebastian Krings},
  booktitle={Formal Methods Teaching (FMTea)},
  year=2021
}
 
 @book{touchOfClass,
  title={Touch of Class},
  author={Bertrand Meyer},
  year=2009,
  publisher="Springer"
 }
 
 
 @inproceedings{CoqTute11,
  author    = {Christine Paulin{-}Mohring},
 
  title     = {Introduction to the {Coq} Proof-Assistant for Practical Software Verification},
  booktitle = {{LASER} International Summer School},
  Xseries    = {Lecture Notes in Computer Science},
  Xvolume    = {7682},
  Xpages     = {45--95},
  publisher = {Springer},
  year      = {2011},
  Xurl       = {https://doi.org/10.1007/978-3-642-35746-6\_3},
  Xdoi       = {10.1007/978-3-642-35746-6\_3},
  Xtimestamp = {Tue, 14 May 2019 10:00:44 +0200},
  Xbiburl    = {https://dblp.org/rec/conf/laser/Paulin-Mohring11.bib},
  Xbibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{Chipala2013,
 title={Certified Programming with Dependent Types: A Pragmatic Introduction to the {Coq} Proof Assistant},
 author={Adam Chlipala},
 year=2013,
 publisher="{MIT} Press"}
 
 
 @inproceedings{dafnytute17,
  author    = {Paqui Lucio},
  title     = {A Tutorial on Using {D}afny to Construct Verified Software},
  booktitle = {{XVI} Jornadas sobre Programaci{\'{o}}n y Lenguajes
               {PROLE}},
  Xseries    = {{EPTCS}},
  year      = {2016},
  Xurl       = {https://doi.org/10.4204/EPTCS.237.1},
  Xdoi       = {10.4204/EPTCS.237.1},
  Xtimestamp = {Wed, 12 Sep 2018 01:05:15 +0200},
  Xbiburl    = {https://dblp.org/rec/journals/corr/Lucio17.bib},
  Xbibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{Dafny3.0.0,
  title = {Dafny 3.0.0 release},
  author = {Leino, K. Rustan M.},
  howpublished = {\texttt{https://\-github.com/\-dafny-lang/\-dafny/\-releases/\-tag/\-v3.0.0}},
  Xurl = {\url{https://\-github.com/\-dafny-lang/\-dafny/\-releases/\-tag/\-v3.0.0}}
  }
  
 
 @Book{tlabook,
  author = 	 {Leslie Lamport},
  title = 	 {Specifying Systems: The {TLA+} Language and Tools for Hardware and Software Engineers}, 
  publisher = 	 {Pearson},
  year = 	 2002}

 @Book{spinbook,
  author = 	 {Gerard J. Holzmann},
  title = 	 {The {SPIN} Model Checker: Primer and Reference Manual}, 
  publisher = {Addison-Wesley},
  year = 	 2003}


@book{alloybook,
	author = {Daniel Jackson},
	month = {April},
	publisher = {{MIT Press}},
	title = {Software Abstractions: Logic, Language, and Analysis},
	year = 2006
}




@InProceedings{MPTP,
  author    = {James Noble and David Streader
  and Isaac Oscar Gariano and Miniruwani Samarakoon},
  title = {More Programming Than Programming: Teaching Formal Methods in a Software Engineering Programme},
  booktitle = {{NASA} Symposium on  Formal Methods},           
  year      = 2022
}

@Book{WW1908,
  author = 	 {Kenneth Grahame},
  title = 	 {The Wind in the Willows},
  publisher = 	 {Methuen},
  year = 	 1908,
  address = 	 {London}}


@InProceedings{teachB2023,
author="Lecomte, Thierry",
Xeditor="Dubois, Catherine and San Pietro, Pierluigi",
title="Teaching and Training in Formalisation with B",
booktitle="Formal Methods Teaching",
year="2023",
Xpublisher="Springer Nature Switzerland",
Xaddress="Cham",
Xpages="82--95",
Xabstract="Despite significant advancements in the design of formal integrated development environments, applying formal methods in software industry is still perceived as a difficult task. To ease the task, providing tools that help during the development cycle is essential but proper education of computer scientists and software engineers is also an important challenge to take up. This paper summarises our experience of 20 years spent in the education of engineers, either colleagues or customers, and students, together with the parallel design and improvement of supporting modelling tools.",
Xisbn="978-3-031-27534-0"
}

@InProceedings{teachSAT2023,
author="{\'A}brah{\'a}m, Erika and Nalbach, Jasper and Promies, Valentin",
Xeditor="Dubois, Catherine and San Pietro, Pierluigi",
title="Automated Exercise Generation for Satisfiability Checking",
booktitle="Formal Methods Teaching",
year="2023",
Xpublisher="Springer Nature Switzerland",
Xaddress="Cham",
Xpages="1--16",
Xabstract="Due to the pandemic, we had to switch our satisfiability checking lecture to an online format. To create space for interaction, we gave the students the opportunity to earn bonus points for the final exam by correctly answering some questions during the lecture. It turned out to be challenging to design these questions in a way that makes them relevant, solvable in limited time, automatically evaluated and parametric such that each student gets an individual but comparable variant of the exercise. In this paper, we report the challenges we faced, propose quality criteria for such exercises and discuss these criteria on concrete examples we employed in our teaching.",
Xisbn="978-3-031-27534-0"
}

@Article{flipped,
  author = 	 {Militsa Nechkina},
  title = 	 {Increasing the effectiveness of a lesson},
  journal = 	 {Communist},
  year = 	 1984,
  volume = 	 2,
  number = 	 51}


@Misc{functionmethod,
  author = 	 {{Dafny Project}},
  title = 	 {Quick migration guide from {Dafny~3.X} to {Dafny~4.0}},
  howpublished = {\url{https://github.com/dafny-lang/ide-vscode/wiki/Quick-migration-guide-from-Dafny-3.X-to-Dafny-4.0}},
  month = 	 mar,
  year = 	 2023}

@Article{epigrams,
  author =       "Alan Perlis",
  title =        "Epigrams on programming",
  journal =      {{SIGPLAN} Notices},
  volume =       17,
  month =        sep,
  number =       9,
  year =         1982
}




@article{backusALGOL,
    author = {Backus, J. W. and Bauer, F. L. and Green, J. and Katz, C. and McCarthy, J. and Naur, P. and Perlis, A. J. and Rutishauser, H. and Samelson, K. and Vauquois, B. and Wegstein, J. H. and van Wijngaarden, A. and Woodger, M.},
    title = "{Revised report on the algorithmic language ALGOL 60}",
    journal = {The Computer Journal},
    volume = {5},
    number = {4},
    pages = {349-367},
    year = {1963},
    month = {01},
    abstract = "{The report gives a complete defining description of the international algorithmic language ALGOL 60. This is a language suitable for expressing a large class of numerical processes in a form sufficiently concise for direct automatic translation into the language of programmed automatic computers.The introduction contains an account of the preparatory work leading up to the final conference, where the language was defined. In addition the notions reference language, publication language, and hardware representations are explained.In the first chapter a survey of the basic constituents and features of the language is given, and the formal notation, by which the syntactic structure is defined, is explained.The second chapter lists all the basic symbols, and the syntactic units know as identifiers, numbers, and strings are defined. Further, some important notions such as quantity and value are defined.The third chapter explains the rules for forming expressions, and the means of these expressions. Three different types of expressions exist: arithmetic, Boolean (logical), and designational.The fourth chapter describes the operational units of the language, known and statements. The basic statements are: assignment statements (evaluation of a formula), go to statements (explicit break of the sequence of execution of statements), dummy statements, and procedure statements (call for execution of a closed process, defined by a procedure declaration). The formation of more complex structures, having statement character, is explained. Thes include: conditional statements, for statements, compound statements, and blocks.In the fifth chapter the units known as declarations, serving for defining permanent properties of the units entering into a process described in the language, are defined.The report ends with two detailed examples of the use of the language, and an alphabetic index of definitions.}",
    issn = {0010-4620},
    doi = {10.1093/comjnl/5.4.349},
    url = {https://doi.org/10.1093/comjnl/5.4.349},
    eprint = {https://academic.oup.com/comjnl/article-pdf/5/4/349/899594/050349.pdf},
}

@InCollection{immortalinvisible,
  booktitle = {{Hymns of Christ and the Christian Life}},
  author = "Walter Chalmers Smith",
  year = 1867,
  title = "Immortal, Invisible",
  publisher = {Macmillan, London}
  }

@phdthesis{kiko-phd,
    author = "Fernandez-Reyes, Kiko",
    title = {Abstractions to Control the Future},
    school = {Uppsala University} ,
    year = 2021
}

@inproceedings{learn2024,
    author = "James Noble",
    title = {{Learn 'em Dafny}},
    booktitle = {{Dafny Workshop at POPL}},
    year = 2024 
}

@inproceedings{flags2024,
    author = "de Muijnck-Hughes, Jan and James Noble",
    title = {{Colouring Flags with Dafny \& Idris}},
    booktitle = {{Dafny Workshop at POPL}},
    year = 2024 
}

@inproceedings{dafnydala-ftfjp2024,
author = {Noble, James and Mackay, Julian and Wrigstad, Tobias and Fawcet, Andrew and Homer, Michael},
title = {Dafny vs. Dala: Experience with Mechanising Language Design},
year = {2024},
Xisbn = {9798400711114},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
Xurl = {https://doi.org/10.1145/3678721.3686228},
doi = {10.1145/3678721.3686228},
Xabstract = {Dala is a design for a concurrent dynamic object-oriented language. A key goal of Dala's design is to avoid data races, by ensuring threads do not share mutable state. In this paper we discuss our experience using the program verification tool Dafny to validate Dala's design. We explain how we modelled salient features of Dala in Dafny, and how Dafny did (or did not) assist our confidence in Dala's design.},
Xbooktitle = {Proceedings of the 26th ACM International Workshop on Formal Techniques for Java-like Programs},
pages = {37–43},
numpages = {7},
Xkeywords = {Dafny, Dala, Immutability, Ownership, Uniqueness},
Xlocation = {Vienna, Austria},
booktitle = {{FTfJP}}
}



@inproceedings{stability-dafny2024,
    author = "Sean McLaughlin and Georges-Axel Jaloyan and Tongtong Xiang and Florian Rabe",
    title = {{Enhancing Proof Stability}},
    booktitle = {{Dafny Workshop at POPL}},
    year = 2024 
}


@inproceedings{typesystems-dafny2024,
    author = "Joseph W. Cutler and Michael Hicks and Emina Torlak",
    title = {{Improving the Stability of Type Safety Proofs in {D}afny}},
    booktitle = {{Dafny Workshop at POPL}},
    year = 2024 
}

@inproceedings{types-dafnyblog2024,
    author = "Mikael Mayer",
    title = "How to use Dafny to prove type safety",
    booktitle = {{Dafny Blog}},
    year = 2023,
    month = jul, 
    url = "dafny.org/blog/2023/07/14/types-and-programming-languages"
}

@inproceedings{extensionality-dafnyfaq2022,
    author = "James Wilcox",
    title = "Incomplete axiomatization of collection operations and extensionality",
    booktitle = {{Dafny FAQ}},
    year = 2022,
    month = may, 
    url = "github.com/dafny-lang/dafny/wiki/FAQ"
}



@inproceedings{dafny-europlop2024,
    author = "James Noble and Charles Weir",
    title = {{The Faultless Way of Programming: Principles, Patterns, Practices, and Peculiarities for Verification in Dafny}},
    booktitle = {{EuroPLoP}},
    year = 2024
}



@book{fumbling1988,
author = {Smith, Douglas K. and Alexander, Robert D.},
title = {Fumbling the future: how {Xerox} invented, then ignored, the first personal computer},
year = {1988},
isbn = {0688069592},
publisher = {William Morrow \& Co.},
Xaddress = {USA}
}


@inproceedings{caps-ecoop2001,
 author = {John Boyland and James Noble and William Retert},
 title     = {{C}apabilities for {S}haring},
 year      = {2001},
 booktitle = ECOOP,
 xxpublisher = {Springer}
}

@inproceedings{grace-onward2012,
        Author = {Andrew P. Black and Kim B. Bruce and Michael Homer and James Noble},
        xBooktitle = {Onward! '12: Proceedings 12th SIGPLAN Symp. on New Ideas in Programming and Reflections on Software},
        booktitle = {{Onward!}},
        Date-Added = {2012-07-19 21:09:15 +0000},
        Date-Modified = {2013-01-09 23:48:17 +0000},
        Keywords = {accidental},
        xPages = {85--98},
        xPublisher = {ACM},
        Title = {{Grace}: the absence of (inessential) difficulty},
        xUrl = {doi.acm.org/10.1145/2384592.2384601},
        doi = {10.1145/2384592.2384601},
        Year = {2012}
}


@inproceedings{cassex-eth-fm2023,
  author       = {Franck Cassez and
                  Joanne Fuller and
                  Milad K. Ghale and
                  David J. Pearce and
                  Horacio Mijail Anton Quiles},
  title        = {Formal and Executable Semantics of the {E}thereum Virtual Machine in {D}afny},
  booktitle    = {Formal Methods {(FM)}},
  xseries       = {Lecture Notes in Computer Science},
  xvolume       = {14000},
  xpages        = {571--583},
  xpublisher    = {Springer},
  year         = {2023}
}


@inproceedings{Z3-tacas2008,
 author = {Leonardo De Moura and Nikolaj Bj{\o}rner},
 title = {{Z3}: an efficient {SMT} solver},
 booktitle = {TACAS},
 series = {ETAPS},
 year = {2008},
 xpublisher = {Springer}
}

@inproceedings{counterexamples-tacas2022,
  author       = {Aleksandar Chakarov and
                  Aleksandr Fedchin and
                  Zvonimir Rakamaric and
                  Neha Rungta},
  Xeditor       = {Dana Fisman and
                  Grigore Rosu},
  title        = {Better Counterexamples for Dafny},
 booktitle = {TACAS},
 series = {ETAPS},
  Xbooktitle    = {Tools and Algorithms for the Construction and Analysis of Systems
                  - 28th International Conference, {TACAS} 2022, Held as Part of the
                  European Joint Conferences on Theory and Practice of Software, {ETAPS}
                  2022, Munich, Germany, April 2-7, 2022, Proceedings, Part {I}},
  Xseries       = {Lecture Notes in Computer Science},
  Xvolume       = {13243},
  pages        = {404--411},
  Xpublisher    = {Springer},
  year         = {2022},
  doi          = {10.1007/978-3-030-99524-9_23}
}


@inproceedings{ironfleet-sosp2015,
  author       = {Chris Hawblitzel and
                  Jon Howell and
                  Manos Kapritsos and
                  Jacob R. Lorch and
                  Bryan Parno and
                  Michael L. Roberts and
                  Srinath T. V. Setty and
                  Brian Zill},
  xeditor       = {Ethan L. Miller and
                  Steven Hand},
  title        = {{IronFleet}: proving practical distributed systems correct},
  xbooktitle    = {Proceedings of the 25th Symposium on Operating Systems Principles,
                  {SOSP} 2015, Monterey, CA, USA, October 4-7, 2015},
  booktitle    = {{SOSP}},
  xpages        = {1--17},
  xpublisher    = {{ACM}},
  year         = {2015},
  doi          = {10.1145/2815400.2815428}
}

@article{linear-dafny-oopsla2022,
author = {Li, Jialin and Lattuada, Andrea and Zhou, Yi and Cameron, Jonathan and Howell, Jon and Parno, Bryan and Hawblitzel, Chris},
title = {Linear types for large-scale systems verification},
year = {2022},
Xissue_date = {April 2022},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
Xvolume = {6},
Xnumber = {OOPSLA1},
Xurl = {https://doi.org/10.1145/3527313},
doi = {10.1145/3527313},
Xabstract = {Reasoning about memory aliasing and mutation in software verification is a hard problem. This is especially true for systems using SMT-based automated theorem provers. Memory reasoning in SMT verification typically requires a nontrivial amount of manual effort to specify heap invariants, as well as extensive alias reasoning from the SMT solver. In this paper, we present a hybrid approach that combines linear types with SMT-based verification for memory reasoning. We integrate linear types into Dafny, a verification language with an SMT backend, and show that the two approaches complement each other. By separating memory reasoning from verification conditions, linear types reduce the SMT solving time. At the same time, the expressiveness of SMT queries extends the flexibility of the linear type system. In particular, it allows our linear type system to easily and correctly mix linear and nonlinear data in novel ways, encapsulating linear data inside nonlinear data and vice-versa. We formalize the core of our extensions, prove soundness, and provide algorithms for linear type checking. We evaluate our approach by converting the implementation of a verified storage system (about 24K lines of code and proof) written in Dafny, to use our extended Dafny. The resulting system uses linear types for 91\% of the code and SMT-based heap reasoning for the remaining 9\%. We show that the converted system has 28\% fewer lines of proofs and 30\% shorter verification time overall. We discuss the development overhead in the original system due to SMT-based heap reasoning and highlight the improved developer experience when using linear types.},
journal = {{OOPSLA}},
Xjournal = {Proc. ACM Program. Lang.},
month = apr,
articleno = {69},
numpages = {28},
Xkeywords = {linear types, systems verification}
}



@Inbook{strachey-varieties-book1997,
author="Strachey, Christopher",
editor="O'Hearn, Peter W.
and Tennent, Robert D.",
title="The Varieties of Programming Language",
bookTitle="Algol-like Languages",
year="1997",
Xpublisher="Birkh{\"a}user Boston",
Xaddress="Boston, MA",
pages="51--64",
Xabstract="This paper suggests an analysis of the domains used in programming languages. It identifies some of the characteristic domains and shows that programming languages vary widely in their definition of these domains.",
Xisbn="978-1-4612-4118-8",
doi="10.1007/978-1-4612-4118-8_3",
Xurl="https://doi.org/10.1007/978-1-4612-4118-8_3"
}


@article{hoare-wirth-axiomatic-actainformatica1973,
	title = {An axiomatic definition of the programming language {PASCAL}},
	volume = {2},
	issn = {1432-0525},
	xurl = {https://doi.org/10.1007/BF00289504},
	doi = {10.1007/BF00289504},
	xabstract = {The axiomatic definition method proposed in reference [5] is extended and applied to define the meaning of the programming language PASCAL [1]. The whole language is covered with the exception of real arithmetic and go to statements.},
	number = {4},
	journal = {Acta Informatica},
	author = {Hoare, C. A. R. and Wirth, N.},
	month = dec,
	year = {1973},
	pages = {335--355},
}

@article{wirth-pascal-1971,
        Author = {Wirth, N.},
        Journal = {Acta Informatica},
        Number = {1},
        Title = {The Programming Language {PASCAL}},
        Volume = {1},
        Year = {1971}}

@inproceedings{wirth-pldesign-ifip1974,
  author       = {Niklaus Wirth},
  title        = {On the Design of Programming Languages},
  booktitle    = {{IFIP} Congress},
  pages        = {386--393},
  publisher    = {North-Holland},
  year         = {1974}
}


@Inbook{specsharp-laser2010,
author="Leino, K. Rustan M. and M{\"u}ller, Peter",
title="Using the Spec{\#} Language, Methodology, and Tools to Write Bug-Free Programs",
bookTitle="{LASER} Summer School",
year="2010",
pages="91--139",
doi="10.1007/978-3-642-13010-6_4"
}

@article{verification-oo-invariants-jot2004,
  author = {Mike Barnett and Robert DeLine and Manuel F\"{a}hndrich andK. Rustan M. Leino and Wolfram Schulte},
  title = {Verification of Object-Oriented Programs with Invariants},
  journal = {Journal of Object Technology},
  volume = 3,
  number = 6,
  xissn = {1660-1769},
  year = 2004,
  month = jun,
  note = {Workshop on Formal Techniques for Java-like Programs (FTfJP), ECOOP 2003},
  pages = {27-56},
  doi = {10.5381/jot.2004.3.6.a2},
  Xurl = {http://www.jot.fm/contents/issue_2004_06/article2.html}
}


@article{dynamic-frames-fac2011,
  author       = {Ioannis T. Kassios},
  title        = {The dynamic frames theory},
  journal      = {{Formal Aspects of Computing}},
  volume       = {23},
  number       = {3},
  pages        = {267--288},
  year         = {2011}
}

@inproceedings{dynamic-frames-fm2006,
  author       = {Ioannis T. Kassios},
  title        = {Dynamic Frames: Support for Framing, Dependencies and Sharing Without  Restrictions},
  booktitle    = {{FM}},
  Xseries       = {Lecture Notes in Computer Science},
  volume       = {{LNCS 4085}},
  pages        = {268--283},
 year = 2006}

@InProceedings{wills91,
  author =       "Alan Wills",
  title =        "Capsules and Types in {F}resco",
  booktitle =    {{ECOOP}},
  xpublisher =    "Springer-Verlag",
  month =        jul # " 15-19",
  year =         "1991"
}

@PhdThesis{wills92,
  author =       "Alan Cameron Wills",
  title =        "Formal Methods applied to Object-Oriented Programming",
  school =       "University of Manchester",
  year =         "1992"

}

@inproceedings{verus-oopsla2023,
author = {Lattuada, Andrea and Hance, Travis and Cho, Chanhee and Brun, Matthias and Subasinghe, Isitha and Zhou, Yi and Howell, Jon and Parno, Bryan and Hawblitzel, Chris},
title = {{Verus:} Verifying {Rust} Programs using Linear Ghost Types},
year = {2023},
Xissue_date = {April 2023},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
volume = {7},
booktitle = {OOPSLA1},
url = {https://doi.org/10.1145/3586037},
doi = {10.1145/3586037},
Xabstract = {The Rust programming language provides a powerful type system that checks linearity and borrowing, allowing code to safely manipulate memory without garbage collection and making Rust ideal for developing low-level, high-assurance systems. For such systems, formal verification can be useful to prove functional correctness properties beyond type safety. This paper presents Verus, an SMT-based tool for formally verifying Rust programs.  
With Verus, programmers express proofs and specifications using the Rust language, allowing proofs to take advantage of Rust's linear types and borrow checking. We show how this allows proofs to manipulate linearly typed permissions that let Rust code safely manipulate memory, pointers, and concurrent resources. Verus organizes proofs and specifications using a novel mode system that distinguishes specifications, which are not checked for linearity and borrowing, from executable code and proofs, which are checked for linearity and borrowing.  
We formalize Verus' linearity, borrowing, and modes in a small lambda calculus, for which we prove type safety and termination of specifications and proofs. We demonstrate Verus on a series of examples, including pointer-manipulating code (an xor-based doubly linked list), code with interior mutability, and concurrent code.},
Xjournal = {Proc. ACM Program. Lang.},
Xmonth = apr,
articleno = {85},
numpages = {30},
Xkeywords = {Rust, linear types, systems verification}
}


@article{autoverus-arXiv2024,
  author       = {Chenyuan Yang and
                  Xuheng Li and
                  Md Rakib Hossain Misu and
                  Jianan Yao and
                  Weidong Cui and
                  Yeyun Gong and
                  Chris Hawblitzel and
                  Shuvendu K. Lahiri and
                  Jacob R. Lorch and
                  Shuai Lu and
                  Fan Yang and
                  Ziqiao Zhou and
                  Shan Lu},
  title        = {{AutoVerus: Automated Proof Generation for Rust Code}},
  journal      = {CoRR},
  volume       = {abs/2409.13082},
  year         = {2024}
}

@article{funarg-sigsam1970,
author = {Moses, Joel},
title = {The function of {FUNCTION} in {LISP} or why the {FUNARG} problem should be called the environment problem},
year = {1970},
Xissue_date = {July 1970},
Xpublisher = {Association for Computing Machinery},
Xaddress = {New York, NY, USA},
number = {15},
Xissn = {0163-5824},
Xurl = {https://doi.org/10.1145/1093410.1093411},
doi = {10.1145/1093410.1093411},
xabstract = {A problem common to many powerful programming languages arises when one has to determine what values to assign to free variables in functions. Different implementational approaches which attempt to solve the problem are considered. The discussion concentrates on LISP implementations and points out why most current LISP systems are not as general as the original LISP 1.5 system. Readers not familiar with LISP should be able to read this paper without difficulty since we have tried to couch the argument in ALGOL-like terms as much as possible.},
journal = {{SIGSAM Bull.}},
month = jul,
pages = {13–27},
numpages = {15}
}


@Article{scheme-hosc1998,
  author = 	 {Sussman, G.J. and Steele, G.L.},
  title = 	 {Scheme: A Interpreter for Extended Lambda Calculus},
  journal = 	 {Higher-Order and Symbolic Computation},
  year = 	 1998,
  volume = 	 11,
  pages = 	 {405--439},
  doi = "10.1023/A:1010035624696"
}



@inproceedings{dafny-using-laser2011,
  author       = {Luke Herbert and
                  K. Rustan M. Leino and
                  Jose Quaresma},
  title        = {Using Dafny, an Automatic Program Verifier},
  booktitle    = {{LASER} Summer School},
  series       = {Lecture Notes in Computer Science},
  volume       = {7682},
  pages        = {156--181},
  publisher    = {Springer},
  year         = {2011}
}

@inproceedings{dafny-automatic-lpar2010,
  author       = {K. Rustan M. Leino},
  title        = {Dafny: An Automatic Program Verifier for Functional Correctness},
  booktitle    = {{LPAR} (Dakar)},
  series       = {Lecture Notes in Computer Science},
  volume       = {6355},
  pages        = {348--370},
  publisher    = {Springer},
  year         = {2010}
}

